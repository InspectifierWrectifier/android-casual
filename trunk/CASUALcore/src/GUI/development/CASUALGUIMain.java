/*CASUALJFrame provides UI for CASUAL. 
 *Copyright (C) 2015  Adam Outler
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see https://www.gnu.org/licenses/ .
 */
package GUI.development;

import CASUAL.AudioHandler;
import CASUAL.CASUALConnectionStatusMonitor;
import CASUAL.CASUALMain;
import CASUAL.CASUALMessageObject;
import CASUAL.CASUALScriptParser;
import CASUAL.CASUALSessionData;
import CASUAL.CASUALStartupTasks;
import CASUAL.FileOperations;
import CASUAL.Log;
import CASUAL.caspac.Caspac;
import CASUAL.caspac.Script;
import CASUAL.iCASUALUI;
import CASUAL.misc.CASUALScrFilter;
import CASUAL.network.LinkLauncher;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;

/**
 * provides UI for CASUAL.
 *
 * @author Adam Outler adamoutler@gmail.com
 */
public final class CASUALGUIMain extends javax.swing.JFrame implements iCASUALUI {

    private static final long serialVersionUID = 1L;

    private boolean isReady = false;
    final private boolean isDummyGUI = false;
    Caspac caspac;
    String nonResourceFileName;

    FileOperations fileOperations = new FileOperations();
    private String ComboBoxValue = "";

    /**
     * Creates new form CASUALJFrame2
     */
    public CASUALGUIMain() {
        notificationCASUALSound();
        initComponents();
        //set up place to log to for GUI
        //ProgressArea.setContentType("text/html");
        ProgressArea.setAutoscrolls(true);
        ProgressArea.setText(CASUALMain.getSession().PreProgress + ProgressArea.getText());

        CASUALStartupTasks.lockGUIformPrep = false;

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {

                CASUAL.CASUALMain.shutdown(0);
            }
        });

    }

    /*
     * Timer for adb devices
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) //needed because JDK6 does not support type-modified JComboBoxes
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser1 = new javax.swing.JFileChooser();
        windowBanner = new javax.swing.JLabel();
        comboBoxScriptSelector = new JComboBox<String>();
        startButton = new javax.swing.JButton();
        DonateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        StatusLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        informationScrollPanel = new javax.swing.JScrollPane();
        ProgressArea = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuItemOpenScript = new javax.swing.JMenuItem();
        MenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MenuItemShowDeveloperPane = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        MenuItemShowAboutBox = new javax.swing.JMenuItem();

        FileChooser1.setDialogTitle("Select a CASUAL \"scr\" file");

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        windowBanner.setFont(new java.awt.Font("Ubuntu", 0, 36)); // NOI18N
        windowBanner.setText("loading.. please wait");

        comboBoxScriptSelector.setEnabled(false);
        comboBoxScriptSelector.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxScriptSelectorPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboBoxScriptSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxScriptSelectorActionPerformed(evt);
            }
        });

        startButton.setText("Do It!");
        startButton.setEnabled(false);
        startButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startButtonMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                startButtonMouseExited(evt);
            }
        });
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        DonateButton.setText("Donate");
        DonateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DonateButtonActionPerformed(evt);
            }
        });

        StatusLabel.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
        StatusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/development/resources/images/DeviceDisconnected.png"))); // NOI18N
        StatusLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StatusLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                StatusLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(StatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        informationScrollPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Important Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 1, 10))); // NOI18N

        ProgressArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        informationScrollPanel.setViewportView(ProgressArea);

        jMenu1.setText("File");

        MenuItemOpenScript.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK));
        MenuItemOpenScript.setText("Open CASUAL script");
        MenuItemOpenScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenScriptActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemOpenScript);

        MenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemExit.setText("Exit");
        MenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(MenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        MenuItemShowDeveloperPane.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemShowDeveloperPane.setText("Developing A Script");
        MenuItemShowDeveloperPane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemShowDeveloperPaneActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemShowDeveloperPane);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Show Log");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        MenuItemShowAboutBox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemShowAboutBox.setText("About");
        MenuItemShowAboutBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemShowAboutBoxActionPerformed(evt);
            }
        });
        jMenu2.add(MenuItemShowAboutBox);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(windowBanner, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBoxScriptSelector, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DonateButton))
                            .addComponent(informationScrollPanel))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(windowBanner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informationScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxScriptSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(DonateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * the start button was pressed.
     */
    @Override
    public void StartButtonActionPerformed() {
        Log.level4Debug("StartButtonActionPerformed() Script Activated");
        Log.level4Debug("Script known as " + this.comboBoxScriptSelector.getSelectedItem().toString() + " is running");
        CASUALConnectionStatusMonitor.stop();
        enableDisableControls(false);
        String script = comboBoxScriptSelector.getSelectedItem().toString();

        //execute
        if (CASUALMain.getSession().CASPAC.getActiveScript().extractionMethod != 2) { //not on filesystem
            Log.level4Debug("Loading internal resource: " + script);
            CASUALMain.getSession().CASPAC.getActiveScript().setScriptContinue(true);
            new CASUALScriptParser().executeSelectedScript(caspac, true, CASUALMain.getSession());
        }

    }

    /**
     * sets the progress bar value.
     *
     * @param value value for progress bar
     */
    @Override
    public void setProgressBar(int value) {
        progressBar.setValue(value);
        this.repaint();
    }

    /**
     * sets max value for progress bar
     *
     * @param value maximum
     */
    @Override
    public void setProgressBarMax(int value) {
        progressBar.setMaximum(value);
    }

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        this.StartButtonActionPerformed();
    }//GEN-LAST:event_startButtonActionPerformed

    private void MenuItemShowDeveloperPaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemShowDeveloperPaneActionPerformed
        CASUALJFrameDeveloperInstructions CDI = new CASUALJFrameDeveloperInstructions();
        CDI.setVisible(true);
    }//GEN-LAST:event_MenuItemShowDeveloperPaneActionPerformed

    private void MenuItemOpenScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenScriptActionPerformed

        String FileName;
        FileChooser1.setDialogTitle("Select a CASUAL \"scr\" file");
        FileChooser1.setFileFilter(new CASUALScrFilter());
        int returnVal = FileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                CASUALConnectionStatusMonitor.stop();
                this.enableDisableControls(false);
                FileName = FileChooser1.getSelectedFile().getCanonicalPath();
                nonResourceFileName = this.getFilenameWithoutExtension(FileName);
                Log.level2Information("Description for " + nonResourceFileName);
                try {
                    Log.level2Information(fileOperations.readFile(nonResourceFileName + ".txt"));
                } catch (Exception e) {
                    Log.level2Information("@textResourceNotFound");
                }
                this.comboBoxScriptSelector.setSelectedItem(nonResourceFileName);
                comboBoxScriptSelector.setEditable(true);
                ComboBoxValue = getFilenameWithoutExtension(FileName);
                comboBoxScriptSelector.setSelectedItem(ComboBoxValue);
                comboBoxScriptSelector.setEditable(false);
                CASUALConnectionStatusMonitor.resumeAfterStop();
            } catch (IOException ex) {
                Log.errorHandler(ex);
            }

        }
    }//GEN-LAST:event_MenuItemOpenScriptActionPerformed

    private void MenuItemShowAboutBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemShowAboutBoxActionPerformed
        CASUALJFrameAboutBox CAB = new CASUALJFrameAboutBox();
        CAB.setVisible(true);
    }//GEN-LAST:event_MenuItemShowAboutBoxActionPerformed

    private void MenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExitActionPerformed
        CASUAL.CASUALMain.shutdown(0);
    }//GEN-LAST:event_MenuItemExitActionPerformed

    private void DonateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DonateButtonActionPerformed
        this.setInformationScrollBorderText("Donate");
        int DResult = new CASUALMessageObject("Donate to the developers", "This application was developed by " + caspac.getBuild().getDeveloperName() + " using CASUAL framework.\n"
                + "Donations give developers a tangeble reason to continue quality software development\n").showTimeoutDialog(
                        60, //timeout
                        null, //parentComponent
                        //DisplayTitle
                        javax.swing.JOptionPane.OK_OPTION, // Options buttons
                        javax.swing.JOptionPane.INFORMATION_MESSAGE, //Icon
                        new String[]{"Donate To CASUAL", "Donate To " + caspac.getBuild().getDeveloperName()}, // option buttons
                        "No"); //Default{
        if (DResult == 0) {
            launchLink("https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZYM99W5RHRY3Y");
        } else if (DResult == 1) {
            launchLink(caspac.getBuild().getDonateLink());
        }
    }//GEN-LAST:event_DonateButtonActionPerformed
    /**
     * sets the window visible.
     *
     * @param v set true if window should be visible.
     */
    @Override
    public void setVisible(boolean v) {
        Log.level3Verbose("Setting window visibility" + v);
        setLocationRelativeTo(null);
        super.setVisible(v);
    }

    private void comboBoxScriptSelectorPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxScriptSelectorPopupMenuWillBecomeInvisible
        CASUALConnectionStatusMonitor.stop();
        this.enableDisableControls(false);
        CASUALStartupTasks.lockGUIunzip = true;
        String selectedScript = comboBoxScriptSelector.getSelectedItem().toString();
        Log.level4Debug("hiding script selector TargetScript: " + selectedScript);
        caspac.setActiveScript(caspac.getScriptByName(selectedScript));
        Log.level2Information(caspac.getActiveScript().getDiscription());
        caspac.startAndWaitForUnzip();

        CASUALStartupTasks.lockGUIunzip = false;
        CASUALConnectionStatusMonitor.resumeAfterStop();


    }//GEN-LAST:event_comboBoxScriptSelectorPopupMenuWillBecomeInvisible

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CASUALJFrameLog CASUALLogJFrame = new CASUALJFrameLog();
        CASUALLogJFrame.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
    }//GEN-LAST:event_formWindowClosing
    boolean buttonEnableStage = false;
    private void startButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseClicked
    }//GEN-LAST:event_startButtonMouseClicked

    private void startButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startButtonMouseExited
    }//GEN-LAST:event_startButtonMouseExited

    private void StatusLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StatusLabelMouseClicked
        if (buttonEnableStage) {
            Log.level4Debug("Control system override active.  User has manually enabled controls");
            startButton.setEnabled(buttonEnableStage);
            this.comboBoxScriptSelector.setEnabled(buttonEnableStage);
            this.startButton.setText(java.util.ResourceBundle.getBundle("SCRIPTS/-build").getString("Window.ExecuteButtonText"));
            buttonEnableStage = false;

        }
        if (!startButton.isEnabled() && !CASUALStartupTasks.lockGUIformPrep) {
            Log.level4Debug("Control system override clicked");
            startButton.setText("Click again to enable all controls");
            buttonEnableStage = true;

        }
    }//GEN-LAST:event_StatusLabelMouseClicked

    private void StatusLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StatusLabelMouseExited
        try {
            this.startButton.setText(java.util.ResourceBundle.getBundle("SCRIPTS/-build").getString("Window.ExecuteButtonText"));
        } catch (java.util.MissingResourceException ex) {
            try {
                this.startButton.setText(java.util.ResourceBundle.getBundle("SCRIPTS\\-build").getString("Window.ExecuteButtonText"));
            } catch (java.util.MissingResourceException er) {
                this.startButton.setText(CASUALMain.getSession().CASPAC.getBuild().getExecuteButtonText());
            }
        }
        buttonEnableStage = false;
    }//GEN-LAST:event_StatusLabelMouseExited

    private void comboBoxScriptSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxScriptSelectorActionPerformed
    }//GEN-LAST:event_comboBoxScriptSelectorActionPerformed

    private static void launchLink(String Link) {
        new LinkLauncher(Link).launch();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DonateButton;
    private javax.swing.JFileChooser FileChooser1;
    private javax.swing.JMenuItem MenuItemExit;
    private javax.swing.JMenuItem MenuItemOpenScript;
    private javax.swing.JMenuItem MenuItemShowAboutBox;
    private javax.swing.JMenuItem MenuItemShowDeveloperPane;
    private javax.swing.JTextPane ProgressArea;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JComboBox<String> comboBoxScriptSelector;
    private javax.swing.JScrollPane informationScrollPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel windowBanner;
    // End of variables declaration//GEN-END:variables

    /**
     * changes the label icon
     *
     * @param Icon resource to be displayed
     * @param Text text if icon is missing
     */
    public void setStatusLabelIcon(String Icon, String Text) {
        StatusLabel.setIcon(createImageIcon(Icon, Text));
    }

    /**
     * takes a resource and turns it into an ImageIcon
     *
     * @param path pat to resource
     * @param description icon description
     * @return an icon
     */
    protected ImageIcon createImageIcon(String path, String description) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    private String getFilenameWithoutExtension(String FileName) {

        if (FileName.endsWith(".scr")) {
            FileName = FileName.replace(".scr", "");
        }
        return FileName;

    }

    /**
     * sets the message label text
     *
     * @param text label text
     */
    @Override
    public void setUserSubMessage(String text) {
        this.StatusLabel.setText(text);
    }

    /**
     * gets the control status
     *
     * @return true if enabled
     */
    public boolean getControlStatus() {
        return startButton.isEnabled() && comboBoxScriptSelector.isEnabled();
    }

    /**
     * sets controls status
     *
     * @param status commanded value
     * @param number number of devices 
     * @param  mode mode which is commanded
     * @return true if enabled false if not
     */
    @Override
    public boolean setControlStatus(boolean status,int number, String mode) {
        switch (number){
            case 0: this.deviceDisconnected();
                break;
            case 1: this.deviceConnected(mode);
                break;
            default: this.deviceMultipleConnected(number);
                break;
        }
        
        return true;
    }

    boolean enableDisableControls( boolean requestedStatus){
        if (!CASUALStartupTasks.scriptRunLock.isComplete()) {
            return false;
        }
        //LockOnADBDisconnect tells CASUAL to disregard ADB status.
        if (caspac != null) {
            if (caspac.getBuild().isAlwaysEnableControls()) {
                requestedStatus = true; //if LockOnADBDisconnect is false then just enable controls
                startButton.setEnabled(requestedStatus);
                comboBoxScriptSelector.setEnabled(requestedStatus);
                return true;
            }
        }
        if (!CASUALStartupTasks.lockGUIformPrep) {
            if (!CASUALStartupTasks.lockGUIunzip) {
                if (!CASUALStartupTasks.scriptRunLock.isAlive()) {
                    startButton.setEnabled(requestedStatus);
                    comboBoxScriptSelector.setEnabled(requestedStatus);
                    Log.level4Debug("Controls Enabled status: " + requestedStatus);
                } else {
                    Log.level4Debug("Control Change requested but script is running");
                }
            } else {
                Log.level4Debug("Control Change requested but unzip has not yet finished");
            }
        } else {
            Log.level4Debug("Control Change requested but GUI is not ready is set.");
        }
        return checkGUIStatus(requestedStatus);
        
    }
       
       
       
    private boolean checkGUIStatus(boolean expectedStatus) {
        if (CASUALSessionData.isGUIIsAvailable()) {
            return expectedStatus == this.startButton.isEnabled();
        } else if (CASUALSessionData.isGUIIsAvailable()) {  //if gui is not available yet
            return false;
        }
        return true; //gui is not used for this CASUAL.

    }

    /**
     * sets the main window banner text if an image is not used
     *
     * @param text text to display as banner
     */
    @Override
    public void setWindowBannerText(String text) {
        windowBanner.setText(text);
    }

    /**
     * sets "do it!" button text
     *
     * @param text text for main execution button
     */
    @Override
    public void setStartButtonText(String text) {
        startButton.setText(text);
    }

    /**
     * sets window banner image
     *
     * @param icon image to display
     * @param text text if image cannot be displayed
     */
    public void setWindowBannerImage(BufferedImage icon, String text) {
        windowBanner.setIcon(new ImageIcon(icon, text));

    }

    @Override
    public void dispose() {
        this.setVisible(false);
        super.dispose();
        if (CASUALSessionData.getGUI() == this) {
            CASUALSessionData.setGUI(null);
        }
        CASUAL.CASUALMain.shutdown(0);
        System.exit(0);
    }

    /**
     * window is closing
     *
     * @param e closing event
     */
    public void windowCosing(WindowEvent e) {
        this.setVisible(false);
        this.dispose();
        CASUAL.CASUALMain.shutdown(0);
    }

    @Override
    public void setScript(Script s) {
    }

    @SuppressWarnings({"rawtypes", "unchecked"}) //needed because JDK6 does not support type-modified JComboBoxes
    @Override
    public void setCASPAC(Caspac caspac) {
        this.setInformationScrollBorderText("Important Information");
        this.caspac = caspac;
        isReady = true;

        Log.level2Information(caspac.getOverview());
        /* if (caspac.build.usePictureForBanner) {
         //setup banner with CASPAC.logo
         }*/
        if (caspac.getBuild().isAlwaysEnableControls()) {
            enableDisableControls(true);
        }
        this.setTitle(caspac.getBuild().getWindowTitle() + " -- CASUAL R" + CASUAL.CASUALTools.getSVNVersion());
        if (caspac.getScripts().size() > 0) {
            for (Script s : caspac.getScripts()) {
                boolean addScript = true;
                for (int i = 0; i < comboBoxScriptSelector.getItemCount(); i++) {
                    if (comboBoxScriptSelector.getItemAt(i).equals(s.getName())) {
                        addScript = false;
                    }
                }
                if (addScript) {
                    this.comboBoxScriptSelector.addItem(s.getName());
                }

                Log.level4Debug("adding " + s.getName() + " to UI");
            }
            if (caspac.getActiveScript() != null) {
                Log.level2Information(caspac.getScriptByName(this.comboBoxScriptSelector.getSelectedItem().toString()).getDiscription());
            }
        }
        if (comboBoxScriptSelector.getItemCount() < 1) {
            // comboBoxScriptSelector.setVisible(false);
        }
        this.startButton.setText(caspac.getBuild().getExecuteButtonText());
        setWindowBannerText("");
        if (caspac.getLogo() != null && caspac.getLogo().getMinX() < 40) {
            setWindowBannerImage(caspac.getLogo(), caspac.getBuild().getBannerText());
        } else {
            setWindowBannerText(caspac.getBuild().getBannerText());
        }
    }
    long time = System.currentTimeMillis();

    @Override
    public void setInformationScrollBorderText(String title) {
        Border b = informationScrollPanel.getBorder();
        ((TitledBorder) b).setTitle(title);
        if (System.currentTimeMillis() > time + 100) {
            repaint();
            time = System.currentTimeMillis();
        }
    }

    static boolean deviceConnected=false;
    public void deviceConnected(String mode) {
        
        setStatusLabelIcon("/GUI/development/resources/images/DeviceConnected.png", "Device Connected");
        setUserSubMessage("Target Acquired");
        AudioHandler.playSound("/GUI/development/resources/sounds/Connected-SystemReady.wav");
        deviceConnected=true;
        if (this.isReady && deviceConnected){
            this.enableDisableControls(true);
        }

    }

    public void deviceDisconnected() {
        deviceConnected=false;
        setStatusLabelIcon("/GUI/development/resources/images/DeviceDisconnected.png", "Device Not Detected");
        AudioHandler.playSound("/GUI/development/resources/sounds/Disconnected.wav");
    }

    public void deviceMultipleConnected(int numberOfDevicesConnected) {
        deviceConnected=false;
        setStatusLabelIcon("/GUI/development/resources/images/TooManyDevices.png", "Target Acquired");
        String[] URLs = {"/GUI/development/resources/sounds/" + String.valueOf(numberOfDevicesConnected) + ".wav", "/GUI/development/resources/sounds/DevicesDetected.wav"};
        AudioHandler.playMultipleInputStreams(URLs);
    }

    public void notificationCASUALSound() {
        AudioHandler.playSound("/GUI/development/resources/sounds/CASUAL.wav");
    }

    @Override
    public String displayMessage(CASUALMessageObject messageObject) {
        int messageType = messageObject.getMessageType();
        String title = messageObject.title;
        String messageText = messageObject.messageText;
        String retval = "";
        Log.Level1Interaction(messageObject.toString());
        switch (messageType) {
            case INTERACTION_TIME_OUT:
                return showTimeOutInteraction(messageObject, messageText, title);
            case INTERACTION_ACTION_REUIRED:
                AudioHandler.playSound("/GUI/development/resources/sounds/UserActionIsRequired.wav");
                return showActionRequiredInteraction(messageText, title);
            //break;// unreachable

            case INTERACTION_USER_CANCEL_OPTION:
                AudioHandler.playSound("/GUI/development/resources/sounds/RequestToContinue.wav");
                return showUserCancelOptionInteraction(title, messageText);               //break; unreachable

            case INTERACTION_USER_NOTIFICATION:
                AudioHandler.playSound("/GUI/development/resources/sounds/Notification.wav");
                showUserNotificationInteraction(title, messageText);
                break;

            case INTERACTION_SHOW_INFORMATION:
                showInformationInteraction(messageText, title);
                break;

            case INTERACTION_SHOW_ERROR:
                showErrorInteraction(messageText, title);
                break;

            case INTERACTION_SHOW_YES_NO:
                return showYesNoInteraction(title, messageText);
            //break; unreachable

            case INTERACTION_INPUT_DIALOG:
                AudioHandler.playSound("/GUI/development/resources/sounds/InputRequested.wav");
                return showInputDialog(title, messageText);
            //break; unreachable

            case INTERACTION_COMMAND_NOTIFICATION:
                showUserNotificationInteraction(title, messageText);
                return messageText;
        }
        return retval;
    }

    /**
     * grabs input from CASUALMain.getSession().in (usually stdin).
     *
     * @return string value containing user input truncated by enter key.
     */
    public String getCommandLineInput() {
        try {
            Log.out.flush();
            String s = CASUALMain.getSession().in.readLine();
            if (s == null) {
                while (s == null) {
                    s = CASUALMain.getSession().in.readLine();
                }
            }
            return s;
        } catch (IOException ex) {
            Log.errorHandler(ex);
            return "";
        }
    }

    private void waitForStandardInputBeforeContinuing() {
        getCommandLineInput();
    }

    private String showTimeOutInteraction(CASUALMessageObject messageObject, String messageText, String title) {
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            return Integer.toString(new TimeOutOptionPane().timeoutDialog(messageObject.timeoutPresetTime, (Component) CASUALSessionData.getGUI(), messageText, title, messageObject.timeoutOptionType, messageObject.timeoutMessageType, messageObject.timeoutOptions, messageObject.timeoutInitialValue));
        } else {
            Log.Level1Interaction("[STANDARDMESSAGE]" + title + "\n" + messageText + "\n[RESPONSEEXPECTED]");
            String s = getCommandLineInput();
            if (s == null || s.isEmpty()) {
                return "0";
            }
            return "1";
        }
    }

    private String showActionRequiredInteraction(String messageText, String title) throws HeadlessException {
        String retval;
        Log.level4Debug("Displaying Action Is Required Dialog:" + messageText);
        int n = 9999;
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            Object[] Options = {"I did it", "I didn't do it"};
            messageText = "<html>" + messageText.replace("\\n", "<BR>");

            n = JOptionPane.showOptionDialog((Component) CASUALSessionData.getGUI(),
                    messageText,
                    "Dont click through this!",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    Options,
                    Options[1]);
        } else {
            while (n != 0 && n != 1) {
                Log.Level1Interaction("[ACTIONREQUIRED][Q or RETURN]" + title + "\n" + messageText + "\npress Q to quit" + "\n[RESPONSEEXPECTED]");
                retval = getCommandLineInput();
                if (!retval.equals("q") && !retval.equals("Q") && !retval.isEmpty()) {
                    n = new CASUALMessageObject(messageText).showActionRequiredDialog();
                } else if (retval.equals("Q") || retval.equals("q")) {
                    n = 1;
                } else {
                    n = 0;
                }
            }
        }
        return Integer.toString(n);
        //break;// unreachable
    }

    private String showUserCancelOptionInteraction(String title, String messageText) throws HeadlessException {
        int cancelReturn;
        Object[] Options = {"Continue", "Stop"};
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            if (title == null) {
                cancelReturn = JOptionPane.showOptionDialog(this,
                        messageText,
                        "Do you wish to continue?",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        Options,
                        Options[1]);
            } else {
                cancelReturn = JOptionPane.showOptionDialog(this,
                        messageText,
                        title,
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        Options,
                        Options[1]);
            }
        } else {
            Log.Level1Interaction("[CANCELOPTION][Q or RETURN]" + title + "\n" + messageText + "\npress Q to quit" + "\n[RESPONSEEXPECTED]");
            String s = this.getCommandLineInput();
            if (s.equals("q") || s.equals("Q")) {
                cancelReturn = 1;
            } else {
                cancelReturn = 0;
            }
        }
        return Integer.toString(cancelReturn);
        //break; unreachable
    }

    private void showUserNotificationInteraction(String title, String messageText) throws HeadlessException {
        Log.level4Debug("Showing User Notification Dialog -Title:" + title + " -message:" + messageText);
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            if (title != null) {
                JOptionPane.showMessageDialog(this,
                        messageText,
                        title,
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                        messageText,
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            Log.Level1Interaction("[NOTIFICATION][RETURN]" + title + "\n" + messageText + "  Press any key to continue." + "\n[RESPONSEEXPECTED]");
            waitForStandardInputBeforeContinuing();
        }
    }

    private void showInformationInteraction(String messageText, String title) throws HeadlessException {
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            JOptionPane.showMessageDialog(this,
                    messageText, title,
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            Log.Level1Interaction("[INFOMESSAGE][RETURN]" + title + "\n" + messageText + "  Press any key to continue." + "\n[RESPONSEEXPECTED]");
            waitForStandardInputBeforeContinuing();
        }
    }

    private void showErrorInteraction(String messageText, String title) throws HeadlessException {
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            JOptionPane.showMessageDialog(this, messageText, title, ERROR_MESSAGE);
        } else {
            Log.Level1Interaction("[ERRORMESSAGE][RETURN]" + title + "\n" + messageText + "  Press any key to continue." + "\n[RESPONSEEXPECTED]");
            waitForStandardInputBeforeContinuing();
        }
    }

    private String showYesNoInteraction(String title, String messageText) throws HeadlessException {
        Log.level4Debug("Displaying Yes/No Dialog: " + title + " message: " + messageText + "\n[RESPONSEEXPECTED]");
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            if (title == null) {
                title = "Yes or No";
            }
            boolean val = (JOptionPane.showConfirmDialog((Component)  this,
                    messageText,
                    title,
                    JOptionPane.YES_NO_OPTION) == YES_OPTION);
            return val ? "true" : "false";
        } else {
            if (title == null) {
                title = "";
            } else {
                title += "\n";
            }
            //display the messageText
            Log.Level1Interaction("[YESNOOPTION][RETURN or n]" + title + "\n" + messageText + "\npress N for no" + "\n[RESPONSEEXPECTED]");
            String s = this.getCommandLineInput();
            if (s.equals("n") || s.equals("N")) {
                return "false";
            } else {
                return "true";
            }
        }
    }

    private String showInputDialog(String title, String messageText) throws HeadlessException {
        Log.level4Debug("Requesting User Input.. Title:" + title + " -message:" + messageText + "\n[RESPONSEEXPECTED]");
        messageText = "<html>" + messageText.replace("\\n", "\n");
        if (CASUALSessionData.isGUIIsAvailable() && !isDummyGUI) {
            if (title == null) {
                return JOptionPane.showInputDialog(this, messageText, "Input Required", JOptionPane.QUESTION_MESSAGE);
            } else {
                return JOptionPane.showInputDialog(this, messageText, title, JOptionPane.QUESTION_MESSAGE);
            }
        } else {
            Log.Level1Interaction("[INPUT][ANY]" + title + messageText + "\n input:");
            return getCommandLineInput();
        }
        //break; unreachable
    }

    @Override
    public boolean isReady() {
        return isReady;
    }

    @Override
    public boolean isDummyGUI() {
        return isDummyGUI;
    }

    @Override
    public void setReady(boolean ready) {
        isReady = ready;
        if (this.isReady && deviceConnected){
            this.enableDisableControls(true);
        }
    }

    @Override
    public void setBlocksUnzipped(String i) {
        this.setInformationScrollBorderText("Unzipping:" + i);
    }

    @Override
    public void sendString(String string) {
        ProgressArea.setText(ProgressArea.getText().concat(string));
        ProgressArea.setCaretPosition(ProgressArea.getDocument().getLength());
    }

    @Override
    public void sendProgress(String data) {
        try {
            char[] dataArray = data.toCharArray();
            for (int c : dataArray) {
                switch (c) {
                    case 8: //backspace
                        ProgressArea.getStyledDocument().remove(ProgressArea.getStyledDocument().getLength() - 1, ProgressArea.getStyledDocument().getLength());
                        break;
                    default:
                        ProgressArea.getStyledDocument().insertString(ProgressArea.getStyledDocument().getLength(), data, null);
                }
            }

        } catch (BadLocationException ex) {
            Logger.getLogger(CASUALGUIMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        ProgressArea.setCaretPosition(ProgressArea.getDocument().getLength());
    }

    @Override
    public void setUserMainMessage(String text) {
    }
    
    @Override
    public String toString(){
        StringBuilder sb = new StringBuilder();
        sb.append("Ready:").append(this.isReady).append("\n is dummy:").append(this.isDummyGUI()).append("\nStatus:").append(this.StatusLabel.getText()).append("\n").append(this.caspac);
        return sb.toString();
    }

}
