/*CASPACWebOrganizer provides a way to extract meta and properties from caspacs. 
 *Copyright (C) 2015  Adam Outler
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see https://www.gnu.org/licenses/ .
 */
package com.casual_dev.caspacweborganizer;

import CASUAL.FileOperations;
import CASUAL.Log;
import CASUAL.archiving.Unzip;
import CASUAL.crypto.SHA256sum;
import CASUAL.misc.StringOperations;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;

/**
 * extracts meta and properties for use on builds.casual-dev.com
 *
 * @author adamoutler
 */
public class CASPACWebOrganizer {

    static File folder;
    ArrayList<String> candidates = new ArrayList<>();

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("You must specify a folder to be formatted");
            quit(1);
        }

            folder = new File(args[0]);
            
        new CASPACWebOrganizer().organize();
    }

    public static void quit(int x) {
        System.exit(x);
    }

    public void organize() {
            String[] files;
            if (folder.isDirectory()) {
                  files = getListOfFiles();
            } else {
                 files=new String[]{folder.getAbsolutePath()};
            }
        //get list of files
        buildListOfPossibleCASPACs(files);
        for (String candidate : candidates.toArray(new String[candidates.size()])) {
            boolean invalid = true;
            try {
                Unzip unzip = new Unzip(candidate);
                ZipEntry[] entries = validateCaspac(unzip);
                for (ZipEntry entry : entries) {
                    if (null != entry) {

                        System.out.println("Validated candidate " + candidate);
                        deployPropertiesToFilesystem(unzip, entry, candidate);
                        invalid = false;
                    }
                }
            } catch (IOException ex) {
                System.out.println("organize() Permissions/read error while handling " + candidate);
            }
            if (!invalid) {
                addSha256sumToCASPACPropertiesFile(candidate);
            }
        }

    }

    private void addSha256sumToCASPACPropertiesFile(String caspac) {
        String sha256 = "";
        try {
            String propertiesFile = this.getCaspacNameWithoutExtension(caspac) + ".properties";
            Properties prop = new Properties();
            prop.load(new FileInputStream(propertiesFile));
            prop.setProperty("CASPAC.SHA256sum", new SHA256sum(new File(caspac)).getSha256());
            prop.store(new FileOutputStream(propertiesFile), "Generated by CASPACWebOrganizer using info from " + caspac);
        } catch (IOException | NoSuchAlgorithmException ex) {
            Logger.getLogger(CASPACWebOrganizer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private ZipEntry[] validateCaspac(Unzip unzip) {
        ArrayList<ZipEntry> entry = new ArrayList<>();
        while (unzip.zipFileEntries.hasMoreElements()) {
            ZipEntry x = unzip.zipFileEntries.nextElement();
            if (x.getName().toLowerCase().endsWith(".properties") || x.getName().toLowerCase().endsWith(".meta") || x.getName().toLowerCase().equals("-overview.txt")) {
                entry.add(x);
            }
        }
        return entry.toArray(new ZipEntry[entry.size()]);
    }

    private void buildListOfPossibleCASPACs(String[] files) {
        for (String file : files) {
            if (null == file) {
                break;
            }
            if (file.toLowerCase().endsWith(".zip") || file.toLowerCase().endsWith(".caspac")) {
                System.out.println(file + " possible caspac ");
                candidates.add(file);
            } else {
            }
        }
    }

    String[] getListOfFiles() {
        try {
            ArrayList<String> al = new FileOperations().listRecursive(folder.getCanonicalPath());
            return al.toArray(new String[al.size()]);
        } catch (IOException ex) {
            System.out.println("insufficient permissions for file");
            quit(5);
        }
        return null;
    }

    private String getCaspacNameWithoutExtension(String caspac) {
        //https://builds.casual-dev.com/files/all/testpak
        caspac = caspac.substring(0, caspac.lastIndexOf("."));
        Log.level4Debug("CASPAC meta location:" + caspac);
        return caspac;
    }

    private String getFolderNameOfFile(String caspac) {
        //https://builds.casual-dev.com/files/all/testpak
        return new File(caspac).getParent();
    }

    private void deployPropertiesToFilesystem(Unzip unzip, ZipEntry entry, String caspacName) {

        Path workingFile = FileSystems.getDefault().getPath(getCaspacNameWithoutExtension(caspacName) + ".properties");
        System.out.println("Deploying:" + entry.getName() + " to:" + workingFile.toString());
        Properties fileProp =new Properties();
        try {
            if (workingFile.toFile().exists()) {
                //load existing or create new file if required.
                fileProp.load(new FileInputStream(workingFile.toFile()));
            } else {
                workingFile.toFile().createNewFile();

            }

            Properties zipProp = new Properties();
            //create new properties in memory from zip.
            if (entry.getName().toLowerCase().equals("-overview.txt")) {
                zipProp.setProperty("CASPAC.Overview", StringOperations.convertStreamToString(unzip.streamFileFromZip(entry)));
            } else {
                zipProp.load(unzip.streamFileFromZip(entry));
            }
            fileProp.putAll(zipProp);
            
            fileProp.store(new FileOutputStream(workingFile.toFile()), "Generated by CASPACWebOrganizer using values from " + caspacName);

        } catch (IOException ex) {
            Logger.getLogger(CASPACWebOrganizer.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("deployEntries() Permissions error:" + entry.getName() + " to " + workingFile.toString());

            quit(6);
        }

    }
}
