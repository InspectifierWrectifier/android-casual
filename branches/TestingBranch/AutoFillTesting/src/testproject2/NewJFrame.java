/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package testproject2;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import testproject2.commandprocessor.Command;
import testproject2.commandprocessor.CommandList;

/**
 *
 * @author loganludington
 */
public class NewJFrame extends javax.swing.JFrame {

    AutoFillListener afl = new AutoFillListener();
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jTextArea1.getDocument().addDocumentListener(afl);
        jTextArea1.addKeyListener(new jTextAreaKeyboardListener());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    class AutoFillListener implements DocumentListener {
        boolean dollar = false;
        String currentWord = "";
        boolean popUpOpen = false;
        AutoFillPopup popup;
        @Override
        public void insertUpdate(DocumentEvent e) {
            int length = e.getLength();
            int offset = e.getOffset();
            try {
                String s = e.getDocument().getText(offset, length);
                if (s.equals("$")){
                    Rectangle loc = jTextArea1.modelToView(jTextArea1.getCaretPosition());
                    popup = new AutoFillPopup("$"+currentWord);
                    popup.show(jTextArea1, loc.x, loc.y + jTextArea1.getFontMetrics(jTextArea1.getFont()).getHeight());
                    dollar = true;
                    popUpOpen=true;
                } else if (s.equals(" ")) {
                    currentWord = "";
                    dollar = false;
                } else if (dollar) {
                    currentWord = currentWord + s;
                    updatePopup();
                }
            } catch (BadLocationException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            currentWord = "";
            dollar =false;
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            
        }
        
        public void ClosePopup() {
            if (popup.isShowing()){
                popup.setVisible(false);
                popUpOpen=false;
            }
        }
        
        public void updatePopup() {
            try {
                Rectangle loc = jTextArea1.modelToView(jTextArea1.getCaretPosition());
                popup = new AutoFillPopup("$"+currentWord);
                popup.show(jTextArea1, loc.x, loc.y + jTextArea1.getFontMetrics(jTextArea1.getFont()).getHeight());
            } catch (BadLocationException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
    class AutoFillPopup extends JPopupMenu {
        JMenuItem anItem;
        
        public AutoFillPopup() {
            this.setFocusable(false);
            anItem = new JMenuItem("Click Me!");
            add(anItem);
        }
        
        public AutoFillPopup(String startSeq) {
            this.removeAll();
            setFocusable(false);
            CommandList cmdlst = new CommandList(this.getClass().getClassLoader().getResourceAsStream("testproject2/resources/Commands.properties")); 
            cmdlst.getCommandListByStart(startSeq);
            for (Command c : cmdlst.getCommandListByStart(startSeq)) {
                JMenuItem menuItem = new JMenuItem(c.script);
                add(menuItem);
            }
        }
    }
    
    class jTextAreaKeyboardListener implements KeyListener {

        @Override
        public void keyTyped(KeyEvent e) {
            if (afl.popUpOpen)
                afl.updatePopup();
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if (KeyEvent.getKeyText(e.getKeyCode()).equals("Escape")){
                afl.ClosePopup();
            }
            System.out.println(KeyEvent.getKeyText(e.getKeyCode()));
            if (KeyEvent.getKeyText(e.getKeyCode()).equals("Down")){
                System.out.println("Down detected");
                if(afl.popUpOpen){
                    afl.popup.setFocusable(true);
                    System.out.println(afl.popup.requestFocusInWindow());
                }
            }
                
        }

        @Override
        public void keyReleased(KeyEvent e) {
            
        }
    
    }
    
}
